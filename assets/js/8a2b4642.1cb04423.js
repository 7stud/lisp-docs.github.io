"use strict";(self.webpackChunklisp_docs_github_io=self.webpackChunklisp_docs_github_io||[]).push([[6314],{6325:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>d,toc:()=>r});var o=n(5893),s=n(1151);const a={title:"Code Blocks Indented",authors:"daniel",tags:["status","beginning","glossary"]},i=void 0,d={permalink:"/blog/2023/12/07/code-indented",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-12-07-code-indented.md",source:"@site/blog/2023-12-07-code-indented.md",title:"Code Blocks Indented",description:"Code Blocks Indented",date:"2023-12-07T00:00:00.000Z",formattedDate:"December 7, 2023",tags:[{label:"status",permalink:"/blog/tags/status"},{label:"beginning",permalink:"/blog/tags/beginning"},{label:"glossary",permalink:"/blog/tags/glossary"}],readingTime:.165,hasTruncateMarker:!1,authors:[{name:"Daniel N",title:"Lisp Docs Contributor",url:"https://github.com/daninus14",key:"daniel"}],frontMatter:{title:"Code Blocks Indented",authors:"daniel",tags:["status","beginning","glossary"]},unlisted:!1,prevItem:{title:"Latest Updates: Definitions Tooltip and others",permalink:"/blog/2023/12/12/"},nextItem:{title:"Glossary Improved!",permalink:"/blog/2023/12/07/"}},l={authorsImageUrls:[void 0]},r=[{value:"Code Blocks Indented",id:"code-blocks-indented",level:2}];function c(e){const t={h2:"h2",p:"p",...(0,s.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"code-blocks-indented",children:"Code Blocks Indented"}),"\n",(0,o.jsxs)(t.p,{children:["Good news, now the code blocks look even better! I indented them using the emacs indentation so it follows the conventional indentation. Changes made to 414 files ",":D"]}),"\n",(0,o.jsx)(t.p,{children:"Enjoy!"})]})}function u(e={}){const{wrapper:t}={...(0,s.a)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>d,a:()=>i});var o=n(7294);const s={},a=o.createContext(s);function i(e){const t=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(a.Provider,{value:t},e.children)}}}]);